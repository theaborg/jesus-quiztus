{"version":3,"sources":["../index.ts","../../../../../../lib/friends/answer_friend_request.js"],"sourcesContent":["import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport { answerFriendRequest } from \"../../../../../lib/friends/answer_friend_request.js\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n\n  try {\n    const { user_id, friend_id, answer } = await req.json();\n\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\n\n    if (!supabaseUrl || !supabaseAnonKey) {\n      throw new Error(\n        \"Missing SUPABASE_URL or SUPABASE_ANON_KEY environment variables\"\n      );\n    }\n\n    const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n      global: {\n        headers: { Authorization: req.headers.get(\"Authorization\") ?? \"\" },\n      },\n    });\n\n    const result = await answerFriendRequest(\n      supabase,\n      user_id,\n      friend_id,\n      answer\n    );\n\n    if (!result) {\n      return new Response(\n        JSON.stringify({ error: \"No response from answerFriendRequest\" }),\n        {\n          status: 500,\n          headers: corsHeaders,\n        }\n      );\n    }\n\n    const { error, data } = result;\n\n    if (error) {\n      return new Response(JSON.stringify({ error: error.message }), {\n        status: 500,\n        headers: corsHeaders,\n      });\n    }\n\n    return new Response(JSON.stringify({ success: true, data }), {\n      status: 200,\n      headers: corsHeaders,\n    });\n  } catch (err) {\n    console.error(\"Request parsing failed\", err);\n    return new Response(JSON.stringify({ error: \"Invalid request body\" }), {\n      status: 400,\n      headers: corsHeaders,\n    });\n  }\n});\n","export const answerFriendRequest = async (\n  supabaseClient,\n  userId,\n  friendId,\n  answer\n) => {\n  const { error, data } = await supabaseClient\n    .from(\"friendships\")\n    .update({ status: answer })\n    .eq(\"user_id\", friendId)\n    .eq(\"friend_id\", userId);\n\n  if (error) {\n    console.error(\"Error in setFriendStatus:\", error.message);\n    return null;\n  }\n  return { error, data };\n};\n"],"mappings":";AAAA,SAAS,aAAa;AACtB,SAAS,oBAAoB;;;ACDtB,IAAM,sBAAsB,OACjC,gBACA,QACA,UACA,WACG;AACH,QAAM,EAAE,OAAO,KAAK,IAAI,MAAM,eAC3B,KAAK,aAAa,EAClB,OAAO,EAAE,QAAQ,OAAO,CAAC,EACzB,GAAG,WAAW,QAAQ,EACtB,GAAG,aAAa,MAAM;AAEzB,MAAI,OAAO;AACT,YAAQ,MAAM,6BAA6B,MAAM,OAAO;AACxD,WAAO;AAAA,EACT;AACA,SAAO,EAAE,OAAO,KAAK;AACvB;;;ADbA,IAAM,cAAc;AAAA,EAClB,+BAA+B;AAAA,EAC/B,gCACE;AACJ;AAEA,MAAM,OAAO,QAAQ;AACnB,MAAI,IAAI,WAAW,WAAW;AAC5B,WAAO,IAAI,SAAS,MAAM,EAAE,SAAS,YAAY,CAAC;AAAA,EACpD;AAEA,MAAI;AACF,UAAM,EAAE,SAAS,WAAW,OAAO,IAAI,MAAM,IAAI,KAAK;AAEtD,UAAM,cAAc,KAAK,IAAI,IAAI,cAAc;AAC/C,UAAM,kBAAkB,KAAK,IAAI,IAAI,mBAAmB;AAExD,QAAI,CAAC,eAAe,CAAC,iBAAiB;AACpC,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,WAAW,aAAa,aAAa,iBAAiB;AAAA,MAC1D,QAAQ;AAAA,QACN,SAAS,EAAE,eAAe,IAAI,QAAQ,IAAI,eAAe,KAAK,GAAG;AAAA,MACnE;AAAA,IACF,CAAC;AAED,UAAM,SAAS,MAAM;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,QAAI,CAAC,QAAQ;AACX,aAAO,IAAI;AAAA,QACT,KAAK,UAAU,EAAE,OAAO,uCAAuC,CAAC;AAAA,QAChE;AAAA,UACE,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,UAAM,EAAE,OAAO,KAAK,IAAI;AAExB,QAAI,OAAO;AACT,aAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,MAAM,QAAQ,CAAC,GAAG;AAAA,QAC5D,QAAQ;AAAA,QACR,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,WAAO,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,MAAM,KAAK,CAAC,GAAG;AAAA,MAC3D,QAAQ;AAAA,MACR,SAAS;AAAA,IACX,CAAC;AAAA,EACH,SAAS,KAAK;AACZ,YAAQ,MAAM,0BAA0B,GAAG;AAC3C,WAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,uBAAuB,CAAC,GAAG;AAAA,MACrE,QAAQ;AAAA,MACR,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACF,CAAC;","names":[]}
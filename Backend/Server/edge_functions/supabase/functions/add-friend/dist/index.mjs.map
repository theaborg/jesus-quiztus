{"version":3,"sources":["../index.ts","../../../../../../lib/friendsServices/send_friend_request.js"],"sourcesContent":["// backend/server/edge_functions/supabase/functions/add-friend/index.ts\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport { sendFriendRequest } from \"../../../../../lib/friendsServices/send_friend_request.js\";\n\n// backend/server/edge_functions/supabase/functions/add-friend/index.ts\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", {\n      headers: corsHeaders,\n    });\n  }\n  try {\n    const { userId, friendId } = await req.json();\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\n    if (!supabaseUrl || !supabaseAnonKey) {\n      throw new Error(\n        \"Missing SUPABASE_URL or SUPABASE_ANON_KEY environment variables\"\n      );\n    }\n    const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n      global: {\n        headers: {\n          Authorization: req.headers.get(\"Authorization\") ?? \"\",\n        },\n      },\n    });\n    const { error, data } = await sendFriendRequest(supabase, userId, friendId);\n    if (error) {\n      return new Response(\n        JSON.stringify({\n          error: error.message,\n        }),\n        {\n          status: 500,\n          headers: corsHeaders,\n        }\n      );\n    }\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data,\n      }),\n      {\n        status: 200,\n        headers: corsHeaders,\n      }\n    );\n  } catch (err) {\n    console.error(\"Request parsing failed\", err);\n    return new Response(\n      JSON.stringify({\n        error: \"Invalid request body\",\n      }),\n      {\n        status: 400,\n        headers: corsHeaders,\n      }\n    );\n  }\n}); //# sourceMappingURL=index.mjs.map\n","export const sendFriendRequest = async (\n  supabaseClient,\n  userId,\n  friendId\n) => {\n  const { data, error } = await supabaseClient.from(\"friendships\").insert({\n    user_id: userId,\n    friend_id: friendId,\n    status: \"pending\",\n  });\n\n  if (error) {\n    console.error(\"Error in sendFriendRequest:\", error.message);\n    return { error };\n  }\n\n  return { data };\n};\n"],"mappings":";AACA,SAAS,aAAa;AACtB,SAAS,oBAAoB;;;ACFtB,IAAM,oBAAoB,OAC/B,gBACA,QACA,aACG;AACH,QAAM,EAAE,MAAM,MAAM,IAAI,MAAM,eAAe,KAAK,aAAa,EAAE,OAAO;AAAA,IACtE,SAAS;AAAA,IACT,WAAW;AAAA,IACX,QAAQ;AAAA,EACV,CAAC;AAED,MAAI,OAAO;AACT,YAAQ,MAAM,+BAA+B,MAAM,OAAO;AAC1D,WAAO,EAAE,MAAM;AAAA,EACjB;AAEA,SAAO,EAAE,KAAK;AAChB;;;ADXA,IAAM,cAAc;AAAA,EAClB,+BAA+B;AAAA,EAC/B,gCACE;AACJ;AACA,MAAM,OAAO,QAAQ;AACnB,MAAI,IAAI,WAAW,WAAW;AAC5B,WAAO,IAAI,SAAS,MAAM;AAAA,MACxB,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACA,MAAI;AACF,UAAM,EAAE,QAAQ,SAAS,IAAI,MAAM,IAAI,KAAK;AAC5C,UAAM,cAAc,KAAK,IAAI,IAAI,cAAc;AAC/C,UAAM,kBAAkB,KAAK,IAAI,IAAI,mBAAmB;AACxD,QAAI,CAAC,eAAe,CAAC,iBAAiB;AACpC,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AACA,UAAM,WAAW,aAAa,aAAa,iBAAiB;AAAA,MAC1D,QAAQ;AAAA,QACN,SAAS;AAAA,UACP,eAAe,IAAI,QAAQ,IAAI,eAAe,KAAK;AAAA,QACrD;AAAA,MACF;AAAA,IACF,CAAC;AACD,UAAM,EAAE,OAAO,KAAK,IAAI,MAAM,kBAAkB,UAAU,QAAQ,QAAQ;AAC1E,QAAI,OAAO;AACT,aAAO,IAAI;AAAA,QACT,KAAK,UAAU;AAAA,UACb,OAAO,MAAM;AAAA,QACf,CAAC;AAAA,QACD;AAAA,UACE,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AACA,WAAO,IAAI;AAAA,MACT,KAAK,UAAU;AAAA,QACb,SAAS;AAAA,QACT;AAAA,MACF,CAAC;AAAA,MACD;AAAA,QACE,QAAQ;AAAA,QACR,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF,SAAS,KAAK;AACZ,YAAQ,MAAM,0BAA0B,GAAG;AAC3C,WAAO,IAAI;AAAA,MACT,KAAK,UAAU;AAAA,QACb,OAAO;AAAA,MACT,CAAC;AAAA,MACD;AAAA,QACE,QAAQ;AAAA,QACR,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF,CAAC;","names":[]}
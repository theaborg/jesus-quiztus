{"version":3,"sources":["../index.ts","../../../../../../lib/user/get_user.js"],"sourcesContent":["import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport { getUser } from \"../../../../../lib/user/get_user.js\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n\n  try {\n    const { user_id } = await req.json();\n\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\n\n    if (!supabaseUrl || !supabaseAnonKey) {\n      throw new Error(\n        \"Missing SUPABASE_URL or SUPABASE_ANON_KEY environment variable\"\n      );\n    }\n\n    const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n      global: {\n        headers: { Authorization: req.headers.get(\"Authorization\") ?? \"\" },\n      },\n    });\n\n    const user = await getUser(supabase, user_id);\n\n    if (!user) {\n      return new Response(JSON.stringify({ error: \"User not found\" }), {\n        status: 404,\n        headers: corsHeaders,\n      });\n    }\n\n    return new Response(JSON.stringify({ success: true, data: user }), {\n      status: 200,\n      headers: corsHeaders,\n    });\n  } catch (err) {\n    console.error(\"Request parsing failed\", err);\n    return new Response(JSON.stringify({ error: \"Invalid request body\" }), {\n      status: 400,\n      headers: corsHeaders,\n    });\n  }\n});\n","export const getUser = async (supabaseClient, userId) => {\n  const { data, error } = await supabaseClient\n    .from(\"users\")\n    .select(\"id, nickname, profile_picture\")\n    .eq(\"id\", userId)\n    .single();\n  if (error) {\n    console.error(\"Error fetching user:\", error.message);\n    return null;\n  }\n  let avatarUrl = \"/profile_picture.jpg\"; // fallback\n  if (data?.profile_picture) {\n    const { data: urlData } = supabaseClient.storage\n      .from(\"profile-pictures\")\n      .getPublicUrl(`${userId}/${data.profile_picture}`);\n    avatarUrl = urlData?.publicUrl || avatarUrl;\n  }\n  return { ...data, avatarUrl };\n};\n"],"mappings":";AAAA,SAAS,aAAa;AACtB,SAAS,oBAAoB;;;ACDtB,IAAM,UAAU,OAAO,gBAAgB,WAAW;AACvD,QAAM,EAAE,MAAM,MAAM,IAAI,MAAM,eAC3B,KAAK,OAAO,EACZ,OAAO,+BAA+B,EACtC,GAAG,MAAM,MAAM,EACf,OAAO;AACV,MAAI,OAAO;AACT,YAAQ,MAAM,wBAAwB,MAAM,OAAO;AACnD,WAAO;AAAA,EACT;AACA,MAAI,YAAY;AAChB,MAAI,MAAM,iBAAiB;AACzB,UAAM,EAAE,MAAM,QAAQ,IAAI,eAAe,QACtC,KAAK,kBAAkB,EACvB,aAAa,GAAG,MAAM,IAAI,KAAK,eAAe,EAAE;AACnD,gBAAY,SAAS,aAAa;AAAA,EACpC;AACA,SAAO,EAAE,GAAG,MAAM,UAAU;AAC9B;;;ADdA,IAAM,cAAc;AAAA,EAClB,+BAA+B;AAAA,EAC/B,gCACE;AACJ;AAEA,MAAM,OAAO,QAAQ;AACnB,MAAI,IAAI,WAAW,WAAW;AAC5B,WAAO,IAAI,SAAS,MAAM,EAAE,SAAS,YAAY,CAAC;AAAA,EACpD;AAEA,MAAI;AACF,UAAM,EAAE,QAAQ,IAAI,MAAM,IAAI,KAAK;AAEnC,UAAM,cAAc,KAAK,IAAI,IAAI,cAAc;AAC/C,UAAM,kBAAkB,KAAK,IAAI,IAAI,mBAAmB;AAExD,QAAI,CAAC,eAAe,CAAC,iBAAiB;AACpC,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,WAAW,aAAa,aAAa,iBAAiB;AAAA,MAC1D,QAAQ;AAAA,QACN,SAAS,EAAE,eAAe,IAAI,QAAQ,IAAI,eAAe,KAAK,GAAG;AAAA,MACnE;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,QAAQ,UAAU,OAAO;AAE5C,QAAI,CAAC,MAAM;AACT,aAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,iBAAiB,CAAC,GAAG;AAAA,QAC/D,QAAQ;AAAA,QACR,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,WAAO,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,MAAM,MAAM,KAAK,CAAC,GAAG;AAAA,MACjE,QAAQ;AAAA,MACR,SAAS;AAAA,IACX,CAAC;AAAA,EACH,SAAS,KAAK;AACZ,YAAQ,MAAM,0BAA0B,GAAG;AAC3C,WAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,uBAAuB,CAAC,GAAG;AAAA,MACrE,QAAQ;AAAA,MACR,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACF,CAAC;","names":[]}
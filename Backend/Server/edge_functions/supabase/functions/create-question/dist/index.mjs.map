{"version":3,"sources":["../index.ts","../../../../../../lib/questions/create_question.js"],"sourcesContent":["import { serve } from \"https://deno.land/std/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport { createQuestion } from \"../../../../../lib/questions/create_question.js\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") return new Response(\"ok\", { headers: corsHeaders });\n\n  const { question, answer, alt1, alt2, alt3, category, image, set } = await req.json();\n  if (!set) {\n    return new Response(\"Missing set ID\", { status: 400, headers: corsHeaders });\n  }\n\n  const supabase = createClient(\n    Deno.env.get(\"SUPABASE_URL\")!,\n    Deno.env.get(\"SUPABASE_ANON_KEY\")!,\n    { global: { headers: { Authorization: req.headers.get(\"Authorization\") } } }\n  );\n\n  try {\n    await createQuestion(supabase, question, answer, alt1, alt2, alt3, category, image, set);\n    return new Response(\"Question created\", { headers: corsHeaders });\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: corsHeaders });\n  }\n});\n","export const createQuestion = async (\r\n  supabase,\r\n  question,\r\n  answer,\r\n  alt1,\r\n  alt2,\r\n  alt3,\r\n  category,\r\n  image,\r\n  set\r\n) => {\r\n  const { error } = await supabase.from(\"Questions\").insert({\r\n    question: question || \"Question\",\r\n    answer: answer || \"Answer\",\r\n    alt_1: alt1 || \"Alternative 1\",\r\n    alt_2: alt2 || \"Alternative 2\",\r\n    alt_3: alt3 || \"Alternative 3\",\r\n    category: category || \"Category\",\r\n    //image: image || null,\r\n    set: set,\r\n  });\r\n\r\n  if (error) throw error;\r\n};\r\n"],"mappings":";AAAA,SAAS,aAAa;AACtB,SAAS,oBAAoB;;;ACDtB,IAAM,iBAAiB,OAC5B,UACA,UACA,QACA,MACA,MACA,MACA,UACA,OACA,QACG;AACH,QAAM,EAAE,MAAM,IAAI,MAAM,SAAS,KAAK,WAAW,EAAE,OAAO;AAAA,IACxD,UAAU,YAAY;AAAA,IACtB,QAAQ,UAAU;AAAA,IAClB,OAAO,QAAQ;AAAA,IACf,OAAO,QAAQ;AAAA,IACf,OAAO,QAAQ;AAAA,IACf,UAAU,YAAY;AAAA;AAAA,IAEtB;AAAA,EACF,CAAC;AAED,MAAI,MAAO,OAAM;AACnB;;;ADnBA,IAAM,cAAc;AAAA,EAClB,+BAA+B;AAAA,EAC/B,gCAAgC;AAClC;AAEA,MAAM,OAAO,QAAQ;AACnB,MAAI,IAAI,WAAW,UAAW,QAAO,IAAI,SAAS,MAAM,EAAE,SAAS,YAAY,CAAC;AAEhF,QAAM,EAAE,UAAU,QAAQ,MAAM,MAAM,MAAM,UAAU,OAAO,IAAI,IAAI,MAAM,IAAI,KAAK;AACpF,MAAI,CAAC,KAAK;AACR,WAAO,IAAI,SAAS,kBAAkB,EAAE,QAAQ,KAAK,SAAS,YAAY,CAAC;AAAA,EAC7E;AAEA,QAAM,WAAW;AAAA,IACf,KAAK,IAAI,IAAI,cAAc;AAAA,IAC3B,KAAK,IAAI,IAAI,mBAAmB;AAAA,IAChC,EAAE,QAAQ,EAAE,SAAS,EAAE,eAAe,IAAI,QAAQ,IAAI,eAAe,EAAE,EAAE,EAAE;AAAA,EAC7E;AAEA,MAAI;AACF,UAAM,eAAe,UAAU,UAAU,QAAQ,MAAM,MAAM,MAAM,UAAU,OAAO,GAAG;AACvF,WAAO,IAAI,SAAS,oBAAoB,EAAE,SAAS,YAAY,CAAC;AAAA,EAClE,SAAS,OAAO;AACd,WAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,MAAM,QAAQ,CAAC,GAAG,EAAE,QAAQ,KAAK,SAAS,YAAY,CAAC;AAAA,EACrG;AACF,CAAC;","names":[]}
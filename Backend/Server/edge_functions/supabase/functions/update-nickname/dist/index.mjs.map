{"version":3,"sources":["../index.ts","../../../../../../lib/user/update_user_nickname.js"],"sourcesContent":["import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport { updateUserNickname } from \"../../../../../lib/user/update_user_nickname.js\";\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n  \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n};\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, {\n      status: 200,\n      headers: corsHeaders,\n    });\n  }\n  try {\n    const { nickname, user_id } = await req.json();\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\n\n    if (!supabaseUrl || !supabaseAnonKey) {\n      throw new Error(\n        \"Missing SUPABASE_URL or SUPABASE_ANON_KEY environment variable\"\n      );\n    }\n\n    const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n      global: {\n        headers: { Authorization: req.headers.get(\"Authorization\") ?? \"\" },\n      },\n    });\n    const response = await updateUserNickname(\n      supabase,\n      user_id,\n      nickname,\n      corsHeaders\n    );\n    return response;\n  } catch (_err) {\n    return new Response(\n      JSON.stringify({\n        error: \"Invalid request body\",\n      }),\n      {\n        status: 400,\n        headers: corsHeaders,\n      }\n    );\n  }\n});\n","export const updateUserNickname = async (\n  supabaseClient,\n  userId,\n  nickname,\n  corsHeaders\n) => {\n  const { error } = await supabaseClient\n    .from(\"users\")\n    .update({ nickname })\n    .eq(\"id\", userId);\n\n  if (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: corsHeaders,\n    });\n  }\n\n  return new Response(JSON.stringify({ success: true }), {\n    status: 200,\n    headers: corsHeaders,\n  });\n};\n"],"mappings":";AAAA,SAAS,aAAa;AACtB,SAAS,oBAAoB;;;ACDtB,IAAM,qBAAqB,OAChC,gBACA,QACA,UACAA,iBACG;AACH,QAAM,EAAE,MAAM,IAAI,MAAM,eACrB,KAAK,OAAO,EACZ,OAAO,EAAE,SAAS,CAAC,EACnB,GAAG,MAAM,MAAM;AAElB,MAAI,OAAO;AACT,WAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,MAAM,QAAQ,CAAC,GAAG;AAAA,MAC5D,QAAQ;AAAA,MACR,SAASA;AAAA,IACX,CAAC;AAAA,EACH;AAEA,SAAO,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,KAAK,CAAC,GAAG;AAAA,IACrD,QAAQ;AAAA,IACR,SAASA;AAAA,EACX,CAAC;AACH;;;ADnBA,IAAM,cAAc;AAAA,EAClB,+BAA+B;AAAA,EAC/B,gCACE;AAAA,EACF,gCAAgC;AAClC;AACA,MAAM,OAAO,QAAQ;AACnB,MAAI,IAAI,WAAW,WAAW;AAC5B,WAAO,IAAI,SAAS,MAAM;AAAA,MACxB,QAAQ;AAAA,MACR,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACA,MAAI;AACF,UAAM,EAAE,UAAU,QAAQ,IAAI,MAAM,IAAI,KAAK;AAC7C,UAAM,cAAc,KAAK,IAAI,IAAI,cAAc;AAC/C,UAAM,kBAAkB,KAAK,IAAI,IAAI,mBAAmB;AAExD,QAAI,CAAC,eAAe,CAAC,iBAAiB;AACpC,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,WAAW,aAAa,aAAa,iBAAiB;AAAA,MAC1D,QAAQ;AAAA,QACN,SAAS,EAAE,eAAe,IAAI,QAAQ,IAAI,eAAe,KAAK,GAAG;AAAA,MACnE;AAAA,IACF,CAAC;AACD,UAAM,WAAW,MAAM;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT,SAAS,MAAM;AACb,WAAO,IAAI;AAAA,MACT,KAAK,UAAU;AAAA,QACb,OAAO;AAAA,MACT,CAAC;AAAA,MACD;AAAA,QACE,QAAQ;AAAA,QACR,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF,CAAC;","names":["corsHeaders"]}
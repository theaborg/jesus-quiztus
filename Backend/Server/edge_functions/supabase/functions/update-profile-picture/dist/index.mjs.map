{"version":3,"sources":["../index.ts","../../../../../../lib/user/update_user_avatar.js"],"sourcesContent":["import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport { updateUserAvatar } from \"../../../../../lib/user/update_user_avatar.js\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n  \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n};\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n  try {\n    const { user_id } = await req.json();\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n    const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\n\n    if (!supabaseUrl || !supabaseAnonKey) {\n      throw new Error(\n        \"Missing SUPABASE_URL or SUPABASE_ANON_KEY environment variable\"\n      );\n    }\n\n    const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n      global: {\n        headers: { Authorization: req.headers.get(\"Authorization\") ?? \"\" },\n      },\n    });\n\n    const formData = await req.formData();\n    const file = formData.get(\"avatar\") as File;\n\n    const response = await updateUserAvatar(\n      supabase,\n      user_id,\n      file,\n      corsHeaders\n    );\n    return response;\n  } catch (err) {\n    console.error(\"Error:\", err);\n    return new Response(\n      JSON.stringify({\n        error: \"Internal server error\",\n      }),\n      {\n        status: 500,\n        headers: corsHeaders,\n      }\n    );\n  }\n});\n","export const updateUserAvatar = async (\n  supabaseClient,\n  userId,\n  file,\n  corsHeaders\n) => {\n  const currentDate = new Date().toISOString();\n  const filePath = `${userId}/profile.${currentDate}`;\n\n  // Upload new profile picture\n  const { error: uploadError } = await supabaseClient.storage\n    .from(\"profile-pictures\")\n    .upload(filePath, file.stream(), {\n      cacheControl: \"3600\",\n      upsert: true,\n      contentType: file.type,\n    });\n\n  if (uploadError) {\n    console.error(\"Upload failed:\", uploadError.message);\n    return new Response(JSON.stringify({ error: \"File upload failed\" }), {\n      headers: corsHeaders,\n      status: 500,\n    });\n  }\n\n  // Fetch old picture filename\n  const { data: userData, error: fetchError } = await supabaseClient\n    .from(\"users\")\n    .select(\"profile_picture\")\n    .eq(\"id\", userId)\n    .single();\n\n  if (fetchError) {\n    console.error(\"Error fetching user:\", fetchError.message);\n    return new Response(JSON.stringify({ error: \"User lookup failed\" }), {\n      headers: corsHeaders,\n      status: 500,\n    });\n  }\n\n  // Delete old picture if exists\n  if (userData?.profile_picture) {\n    const { data: deleteData, error: deleteError } =\n      await supabaseClient.storage\n        .from(\"profile-pictures\")\n        .remove([`${userId}/${userData.profile_picture}`]);\n\n    if (deleteError) {\n      console.error(\"Delete failed:\", deleteError.message);\n    }\n  }\n\n  // Update DB\n  const { error: dbError } = await supabaseClient\n    .from(\"users\")\n    .update({ profile_picture: `profile.${currentDate}` })\n    .eq(\"id\", userId);\n\n  if (dbError) {\n    console.error(\"DB update failed:\", dbError.message);\n    return new Response(JSON.stringify({ error: \"Database update failed\" }), {\n      headers: corsHeaders,\n      status: 500,\n    });\n  }\n\n  // Get public URL\n  const { data: urlData, error: urlError } = supabaseClient.storage\n    .from(\"profile-pictures\")\n    .getPublicUrl(filePath);\n\n  if (urlError) {\n    console.error(\"Public URL error:\", urlError.message);\n    return new Response(JSON.stringify({ error: \"Public URL fetch failed\" }), {\n      headers: corsHeaders,\n      status: 500,\n    });\n  }\n\n  return new Response(\n    JSON.stringify({ success: true, publicUrl: urlData.publicUrl }),\n    { status: 200, headers: corsHeaders }\n  );\n};\n"],"mappings":"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","names":["corsHeaders"]}
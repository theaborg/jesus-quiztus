{"version":3,"sources":["../index.ts","../../../../../../lib/friends/get_friends.js"],"sourcesContent":["import { serve } from \"https://deno.land/std/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport { getFriends } from \"../../../../../lib/friends/get_friends.js\";\n\n// backend/server/edge_functions/supabase/functions/get-active-players/index.ts\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, apikey, content-type\",\n};\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", {\n      headers: corsHeaders,\n    });\n  }\n  try {\n    const { userId } = await req.json();\n    console.log(\"get-friends\", userId);\n    if (!userId) {\n      return new Response(\"Missing userId\", {\n        status: 400,\n        headers: corsHeaders,\n      });\n    }\n    const supabase = createClient(\n      Deno.env.get(\"SUPABASE_URL\")!,\n      Deno.env.get(\"SUPABASE_ANON_KEY\")!,\n      {\n        global: {\n          headers: { Authorization: req.headers.get(\"Authorization\") ?? \"\" },\n        },\n      }\n    );\n    const friends = await getFriends(supabase, userId);\n    return new Response(JSON.stringify(friends), {\n      status: 200,\n      headers: {\n        ...corsHeaders,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n  } catch (error) {\n    let errorMessage = \"Unknown error\";\n    if (error instanceof Error) {\n      errorMessage = error.message;\n    }\n    return new Response(\n      JSON.stringify({\n        error: errorMessage,\n      }),\n      {\n        status: 500,\n        headers: corsHeaders,\n      }\n    );\n  }\n}); //# sourceMappingURL=index.mjs.map\n","export const getFriends = async (supabaseClient, userId) => {\n  const { data, error } = await supabaseClient\n    .from(\"friendships\")\n    .select(\"friend_id, user_id\")\n    .or(`user_id.eq.${userId},friend_id.eq.${userId}`)\n    .eq(\"status\", \"accepted\");\n\n  if (error) {\n    console.error(\"Error in getFriends:\", error.message);\n    return null;\n  }\n\n  return { data };\n};\n"],"mappings":";AAAA,SAAS,aAAa;AACtB,SAAS,oBAAoB;;;ACDtB,IAAM,aAAa,OAAO,gBAAgB,WAAW;AAC1D,QAAM,EAAE,MAAM,MAAM,IAAI,MAAM,eAC3B,KAAK,aAAa,EAClB,OAAO,oBAAoB,EAC3B,GAAG,cAAc,MAAM,iBAAiB,MAAM,EAAE,EAChD,GAAG,UAAU,UAAU;AAE1B,MAAI,OAAO;AACT,YAAQ,MAAM,wBAAwB,MAAM,OAAO;AACnD,WAAO;AAAA,EACT;AAEA,SAAO,EAAE,KAAK;AAChB;;;ADRA,IAAM,cAAc;AAAA,EAClB,+BAA+B;AAAA,EAC/B,gCACE;AACJ;AACA,MAAM,OAAO,QAAQ;AACnB,MAAI,IAAI,WAAW,WAAW;AAC5B,WAAO,IAAI,SAAS,MAAM;AAAA,MACxB,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACA,MAAI;AACF,UAAM,EAAE,OAAO,IAAI,MAAM,IAAI,KAAK;AAClC,YAAQ,IAAI,eAAe,MAAM;AACjC,QAAI,CAAC,QAAQ;AACX,aAAO,IAAI,SAAS,kBAAkB;AAAA,QACpC,QAAQ;AAAA,QACR,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AACA,UAAM,WAAW;AAAA,MACf,KAAK,IAAI,IAAI,cAAc;AAAA,MAC3B,KAAK,IAAI,IAAI,mBAAmB;AAAA,MAChC;AAAA,QACE,QAAQ;AAAA,UACN,SAAS,EAAE,eAAe,IAAI,QAAQ,IAAI,eAAe,KAAK,GAAG;AAAA,QACnE;AAAA,MACF;AAAA,IACF;AACA,UAAM,UAAU,MAAM,WAAW,UAAU,MAAM;AACjD,WAAO,IAAI,SAAS,KAAK,UAAU,OAAO,GAAG;AAAA,MAC3C,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,GAAG;AAAA,QACH,gBAAgB;AAAA,MAClB;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,QAAI,eAAe;AACnB,QAAI,iBAAiB,OAAO;AAC1B,qBAAe,MAAM;AAAA,IACvB;AACA,WAAO,IAAI;AAAA,MACT,KAAK,UAAU;AAAA,QACb,OAAO;AAAA,MACT,CAAC;AAAA,MACD;AAAA,QACE,QAAQ;AAAA,QACR,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF,CAAC;","names":[]}
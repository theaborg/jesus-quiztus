{"version":3,"sources":["../index.ts","../../../../../../lib/games/create_game.js"],"sourcesContent":["import { serve } from \"https://deno.land/std/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\r\nimport { createTriviaGame } from \"../../../../../lib/games/create_game.js\";\r\n\r\nconst corsHeaders = {\r\n  \"Access-Control-Allow-Origin\": \"*\",\r\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\r\n};\r\n\r\nserve(async (req) => {\r\n  if (req.method === \"OPTIONS\") return new Response(\"ok\", { headers: corsHeaders });\r\n\r\n  const body = await req.json();\r\n  const { amount, category, difficulty, type, encoding } = body;\r\n\r\n  const supabase = createClient(\r\n    Deno.env.get(\"SUPABASE_URL\")!,\r\n    Deno.env.get(\"SUPABASE_ANON_KEY\")!,\r\n    {\r\n      global: {\r\n        headers: {\r\n          Authorization: req.headers.get(\"Authorization\"),\r\n        },\r\n      },\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: { user },\r\n    error: authError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (authError || !user) {\r\n    return new Response(JSON.stringify({ error: \"Unauthorized\" }), {\r\n      status: 401,\r\n      headers: corsHeaders,\r\n    });\r\n  }\r\n\r\n  try {\r\n    const gameId = await createTriviaGame(supabase, user.id, {\r\n      amount,\r\n      category,\r\n      difficulty,\r\n      type,\r\n      encoding,\r\n    });\r\n\r\n    return new Response(JSON.stringify({ gameId }), {\r\n      status: 200,\r\n      headers: corsHeaders,\r\n    });\r\n  } catch (err) {\r\n    return new Response(JSON.stringify({ error: err.message }), {\r\n      status: 500,\r\n      headers: corsHeaders,\r\n    });\r\n  }\r\n});\r\n","export const createTriviaGame = async (supabase, userId, { amount, category, difficulty, type, encoding }) => {\r\n  const apiUrl = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=${type}&encode=${encoding}`;\r\n  const response = await fetch(apiUrl);\r\n  const data = await response.json();\r\n\r\n  if (!data.results || !Array.isArray(data.results)) {\r\n    throw new Error(\"Invalid question API response\");\r\n  }\r\n\r\n  const questions = data.results;\r\n\r\n  // Insert new QuestionsSet\r\n  const { data: questionSet, error: qsError } = await supabase\r\n    .from(\"QuestionsSet\")\r\n    .insert([\r\n      {\r\n        name: \"Trivia Game Set\",\r\n        amount,\r\n        category: category.toString(),\r\n        user: userId,\r\n      },\r\n    ])\r\n    .select()\r\n    .single();\r\n\r\n  if (qsError) throw qsError;\r\n\r\n  const formattedQuestions = questions.map((q) => ({\r\n    question: q.question,\r\n    answer: q.correct_answer,\r\n    alt_1: q.incorrect_answers[0] ?? \"\",\r\n    alt_2: q.incorrect_answers[1] ?? \"\",\r\n    alt_3: q.incorrect_answers[2] ?? \"\",\r\n    category: q.category,\r\n    set: questionSet.id,\r\n  }));\r\n\r\n  const { error: insertError } = await supabase\r\n    .from(\"Questions\")\r\n    .insert(formattedQuestions);\r\n  if (insertError) throw insertError;\r\n\r\n  const { data: gameData, error: gameError } = await supabase\r\n    .from(\"games\")\r\n    .insert([\r\n      {\r\n        state: \"pending\",\r\n        question_set: questionSet.id,\r\n        name: \"Trivia Game\",\r\n        host: userId,\r\n        statistics: JSON.stringify({ correct: 0, incorrect: 0 }),\r\n      },\r\n    ])\r\n    .select()\r\n    .single();\r\n\r\n  if (gameError) throw gameError;\r\n\r\n  return gameData.id;\r\n};"],"mappings":"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","names":[]}
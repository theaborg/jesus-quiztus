{"version":3,"sources":["../index.ts","../../../../../../lib/user/create_user.js"],"sourcesContent":["import { serve } from \"https://deno.land/std@0.192.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport { CreateUser } from \"../../../../../lib/user/create_user.js\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"content-type\",\n  \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders });\n  }\n\n  const { nickname } = await req.json();\n\n  const supabaseUrl = Deno.env.get(\"SUPABASE_URL\");\n  const supabaseAnonKey = Deno.env.get(\"SUPABASE_ANON_KEY\");\n\n  if (!supabaseUrl || !supabaseAnonKey) {\n    return new Response(\"Missing Supabase environment variables\", {\n      status: 500,\n      headers: corsHeaders,\n    });\n  }\n\n  const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n    global: {\n      headers: { Authorization: req.headers.get(\"Authorization\") ?? \"\" },\n    },\n  });\n\n  const response = await CreateUser(supabase, nickname, corsHeaders);\n  if (response instanceof Response) {\n    return response;\n  }\n  return new Response(\"Internal Server Error\", {\n    status: 500,\n    headers: corsHeaders,\n  });\n});\n","export const CreateUser = async (supabaseClient, nickname, corsHeaders) => {\n  const { data, error } = await supabaseClient\n    .from(\"Users\")\n    .insert({ nickname })\n    .select();\n\n  if (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 400,\n      headers: corsHeaders,\n    });\n  }\n\n  return new Response(JSON.stringify(data), {\n    status: 200,\n    headers: corsHeaders,\n  });\n};\n"],"mappings":";AAAA,SAAS,aAAa;AACtB,SAAS,oBAAoB;;;ACDtB,IAAM,aAAa,OAAO,gBAAgB,UAAUA,iBAAgB;AACzE,QAAM,EAAE,MAAM,MAAM,IAAI,MAAM,eAC3B,KAAK,OAAO,EACZ,OAAO,EAAE,SAAS,CAAC,EACnB,OAAO;AAEV,MAAI,OAAO;AACT,WAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,MAAM,QAAQ,CAAC,GAAG;AAAA,MAC5D,QAAQ;AAAA,MACR,SAASA;AAAA,IACX,CAAC;AAAA,EACH;AAEA,SAAO,IAAI,SAAS,KAAK,UAAU,IAAI,GAAG;AAAA,IACxC,QAAQ;AAAA,IACR,SAASA;AAAA,EACX,CAAC;AACH;;;ADbA,IAAM,cAAc;AAAA,EAClB,+BAA+B;AAAA,EAC/B,gCAAgC;AAAA,EAChC,gCAAgC;AAClC;AAEA,MAAM,OAAO,QAAQ;AACnB,MAAI,IAAI,WAAW,WAAW;AAC5B,WAAO,IAAI,SAAS,MAAM,EAAE,SAAS,YAAY,CAAC;AAAA,EACpD;AAEA,QAAM,EAAE,SAAS,IAAI,MAAM,IAAI,KAAK;AAEpC,QAAM,cAAc,KAAK,IAAI,IAAI,cAAc;AAC/C,QAAM,kBAAkB,KAAK,IAAI,IAAI,mBAAmB;AAExD,MAAI,CAAC,eAAe,CAAC,iBAAiB;AACpC,WAAO,IAAI,SAAS,0CAA0C;AAAA,MAC5D,QAAQ;AAAA,MACR,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AAEA,QAAM,WAAW,aAAa,aAAa,iBAAiB;AAAA,IAC1D,QAAQ;AAAA,MACN,SAAS,EAAE,eAAe,IAAI,QAAQ,IAAI,eAAe,KAAK,GAAG;AAAA,IACnE;AAAA,EACF,CAAC;AAED,QAAM,WAAW,MAAM,WAAW,UAAU,UAAU,WAAW;AACjE,MAAI,oBAAoB,UAAU;AAChC,WAAO;AAAA,EACT;AACA,SAAO,IAAI,SAAS,yBAAyB;AAAA,IAC3C,QAAQ;AAAA,IACR,SAAS;AAAA,EACX,CAAC;AACH,CAAC;","names":["corsHeaders"]}